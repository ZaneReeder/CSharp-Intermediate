C# Intermediate

/*****************
Section 2
******************/

Always initialize Lists to empty Lists of the given type 
in the constructor of the Class.

: this() constructors to iterate through constructors

Method overloading using Parameter Modification.

Method modification using Out Modification.

/**************
Section 3
***************/

Class Coupling

	Tightly Coupled
		Modifications to the greatest ancestor class
			ripples throughout the entire subsystem
			classes and could break things along the way.
			
	Loosely Coupled
		Minimize changes in classes so that changes are 
			isolated.
		Encapsulation
		Relationship between classes
		Interfaces
		
	Class Relationships
		Inheritnace and Composition
		Favor Composition over Inheritance
		
	Inheritance
		Relationship between two classes such that
			one class inherits code from the other.
		Code ReUse
		Polymorphic Behavior
		
	Composition
		Relationship in which one class contains another.
		Flexibility
		Code ReUse

	Problems with Inheritance
		Easily Abused by amateur designers/devs
		Large hierarchies
		Fragility
		Tightly Coupled
	
	Using Composition
		Person*-> Animal, Walkable
		Dog*-> Animal, Walkable
		Goldfish*-> Animal, Swimmable
		Duck*-> Animal, Flyable
		
	Composition allows Class swap with Interface
	
/**************
Section 4
***************/

Black Box Class Design

Access Modifier
	public
	private
	protected
		accessible only from class and derived classes.
		considered bad design
		revealing implementation to subclasses
	internal
		class modifier.
		accessible only from the same assembly
	protected internal
		accessible only from same assembly or derived classes.
	
	
	Constructor Inheritance
		Base Class constructors are always executed first
		Base Class constructors are not inherited
		Class extensions do not include private fields
		
Upcasting & Downcasting
	(Car) Obj -> Obj as Car
	if (obj is Car)
		Car car = (Car) obj;

	
Boxing Unboxing
	Types
		Value
			Stored on Stack
		Reference
			Stored in Heap
			Classes
	
	Boxing is converting the value 
		type instance to an object reference.
		int number = 10;
		object obj = number;
		
	Unboxing converting the object reference to a value type
	
	Performance Penalty
	
Method Overriding
	Modifying the implementation of an inherited method
	virtual - override

Abstract Classes
	Abstract Modifiers
		Indicates a class or member is missing implementation.

Sealed Classes
	Sealed Modifier
		Prevents derivation of classes or overriding of methods.
	Very unusual and rare
	
/************
Section 6
*************/

Interfaces

Syntax
	public interface ITaxCalculator
	{
		int Calculate(); //Declaration with no modifiers
	}

Build Loosely coupled applications
Using Interface to isolate classes for unit testing

Always reduce the impact of change

Open Close Principle
	Open for Extension but closed for modification

	
/************
Section 7
*************/

Encapsulate the implementation details of a class.
All properties that keep the state of the class should be private.
Know when properties are not neccessary and fields are sufficient.
Ensure a class is always in a valid state.
	
	